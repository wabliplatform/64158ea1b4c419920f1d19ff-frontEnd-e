/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Ps from '../model/Ps';

/**
* Ps service.
* @module api/PsApi
* @version 1.0.0
*/
export default class PsApi {

    /**
    * Constructs a new PsApi. 
    * @alias module:api/PsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createps operation.
     * @callback module:api/PsApi~createpsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ps} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Ps} ps data to be created
     * @param {module:api/PsApi~createpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ps}
     */
    createps(ps, callback) {
      let postBody = ps;
      // verify the required parameter 'ps' is set
      if (ps === undefined || ps === null) {
        throw new Error("Missing the required parameter 'ps' when calling createps");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ps;
      return this.apiClient.callApi(
        '/ps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteps operation.
     * @callback module:api/PsApi~deletepsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} psId the Id parameter
     * @param {module:api/PsApi~deletepsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteps(psId, callback) {
      let postBody = null;
      // verify the required parameter 'psId' is set
      if (psId === undefined || psId === null) {
        throw new Error("Missing the required parameter 'psId' when calling deleteps");
      }

      let pathParams = {
        'psId': psId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ps/{psId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllps operation.
     * @callback module:api/PsApi~getAllpsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Ps>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/PsApi~getAllpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Ps>}
     */
    getAllps(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Ps];
      return this.apiClient.callApi(
        '/ps/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getps operation.
     * @callback module:api/PsApi~getpsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ps} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} psId the Id parameter
     * @param {module:api/PsApi~getpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ps}
     */
    getps(psId, callback) {
      let postBody = null;
      // verify the required parameter 'psId' is set
      if (psId === undefined || psId === null) {
        throw new Error("Missing the required parameter 'psId' when calling getps");
      }

      let pathParams = {
        'psId': psId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Ps;
      return this.apiClient.callApi(
        '/ps/{psId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateps operation.
     * @callback module:api/PsApi~updatepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ps} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} psId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Ps} opts.ps data to be updated
     * @param {module:api/PsApi~updatepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ps}
     */
    updateps(psId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ps'];
      // verify the required parameter 'psId' is set
      if (psId === undefined || psId === null) {
        throw new Error("Missing the required parameter 'psId' when calling updateps");
      }

      let pathParams = {
        'psId': psId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Ps;
      return this.apiClient.callApi(
        '/ps/{psId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
